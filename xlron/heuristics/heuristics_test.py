import os
os.environ['XLA_FLAGS'] = "--xla_force_host_platform_device_count=4"
from absl.testing import absltest
from absl.testing import parameterized
import chex
import jax
import numpy as np
from xlron.environments.env_funcs import *
from xlron.environments.env_funcs_test import *
from xlron.environments.vone import *
from xlron.environments.rsa import *
from xlron.heuristics.heuristics import *
from xlron.environments.env_funcs_test import (rwa_4node_test_setup, rsa_nsfnet_16_test_setup, rsa_4node_3_slot_request_test_setup)
from xlron.environments.rwa_lightpath_reuse.rwa_lightpath_reuse_test import rwa_lightpath_reuse_4_nsfnet_test_setup

class KspffTest(parameterized.TestCase):

    def setUp(self):
        super().setUp()
        self.key, self.env, self.obs, self.state, self.params = rwa_4node_test_setup()

    @chex.all_variants()
    @parameterized.named_parameters(
        ("case_empty", jnp.array([0, 1, 1]),
         jnp.array([[0, 0, 0, 0],
                    [0, 0, 0, 0],
                    [0, 0, 0, 0],
                    [0, 0, 0, 0], ]),
         jnp.array(0)),
        ("case_full", jnp.array([0, 1, 1]),
         jnp.array([[1, 1, 1, 1],
                    [1, 1, 1, 1],
                    [1, 1, 1, 1],
                    [1, 1, 1, 1], ]),
         jnp.array(0)),
        ("case_start_edge", jnp.array([0, 1, 1]),
         jnp.array([[0, 1, 1, 1],
                    [0, 1, 1, 1],
                    [0, 1, 1, 1],
                    [0, 1, 1, 1], ]),
         jnp.array(0)),
        ("case_end_edge", jnp.array([0, 1, 1]),
         jnp.array([[1, 1, 1, 0],
                    [1, 1, 1, 0],
                    [1, 1, 1, 0],
                    [1, 1, 1, 0], ]),
         jnp.array(3)),
        ("case_ksp", jnp.array([0, 1, 1]),
         jnp.array([[1, 1, 1, 0],
                    [0, 0, 0, 1],
                    [0, 0, 0, 1],
                    [0, 0, 0, 1], ]),
         jnp.array(3)),
    )
    def test_ksp_ff(self, request_array, link_slot_array, expected):
        self.state = self.state.replace(request_array=request_array, link_slot_array=link_slot_array)
        self.state = self.env.action_mask(self.state, self.params)
        action = self.variant(ksp_ff, static_argnums=(1,))(self.state, self.params)
        chex.assert_trees_all_close(action, expected)

    @chex.all_variants()
    @parameterized.named_parameters(
    ("case_empty", jnp.array([0, 1, 1]),
     jnp.array([[0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                ]),
     jnp.array(0)),
    ("case_full", jnp.array([0, 1, 1]),
     jnp.array([[1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1], ]),
     jnp.array(0)),
    ("case_start_edge", jnp.array([0, 1, 1]),
     jnp.array([[0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,]]),
     jnp.array(0)),
    ("case_end_edge", jnp.array([0, 1, 1]),
     jnp.array([[1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                ]),
     jnp.array(3)),
    ("case_ff", jnp.array([0, 1, 1]),
     jnp.array([[1, 1, 1, 0],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                ]),
     jnp.array(3)),
    )
    def test_ksp_ff_nsfnet(self, request_array, link_slot_array, expected):
        self.key, self.env, self.obs, self.state, self.params = rsa_nsfnet_4_test_setup(guardband=0)
        self.state = self.state.replace(request_array=request_array, link_slot_array=link_slot_array)
        self.state = self.env.action_mask(self.state, self.params)
        action = self.variant(ksp_ff, static_argnums=(1,))(self.state, self.params)
        chex.assert_trees_all_close(action, expected)


class FfkspTest(parameterized.TestCase):

    def setUp(self):
        super().setUp()
        self.key, self.env, self.obs, self.state, self.params = rwa_4node_test_setup()

    @chex.all_variants()
    @parameterized.named_parameters(
        ("case_empty", jnp.array([0, 1, 1]),
         jnp.array([[0, 0, 0, 0],
                    [0, 0, 0, 0],
                    [0, 0, 0, 0],
                    [0, 0, 0, 0], ]),
         jnp.array(0)),
        ("case_full", jnp.array([0, 1, 1]),
         jnp.array([[1, 1, 1, 1],
                    [1, 1, 1, 1],
                    [1, 1, 1, 1],
                    [1, 1, 1, 1], ]),
         jnp.array(0)),
        ("case_start_edge", jnp.array([0, 1, 1]),
         jnp.array([[0, 1, 1, 1],
                    [0, 1, 1, 1],
                    [0, 1, 1, 1],
                    [0, 1, 1, 1], ]),
         jnp.array(0)),
        ("case_end_edge", jnp.array([0, 1, 1]),
         jnp.array([[1, 1, 1, 0],
                    [1, 1, 1, 0],
                    [1, 1, 1, 0],
                    [1, 1, 1, 0], ]),
         jnp.array(3)),
        ("case_ff", jnp.array([0, 1, 1]),
         jnp.array([[1, 1, 1, 0],
                    [0, 0, 0, 1],
                    [0, 0, 0, 1],
                    [0, 0, 0, 1], ]),
         jnp.array(4)),
    )
    def test_ff_ksp(self, request_array, link_slot_array, expected):
        self.state = self.state.replace(request_array=request_array, link_slot_array=link_slot_array)
        self.state = self.env.action_mask(self.state, self.params)
        action = self.variant(ff_ksp, static_argnums=(1,))(self.state, self.params)
        chex.assert_trees_all_close(action, expected)

    @chex.all_variants()
    @parameterized.named_parameters(
    ("case_empty", jnp.array([0, 1, 1]),
     jnp.array([[0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                ]),
     jnp.array(0)),
    ("case_full", jnp.array([0, 1, 1]),
     jnp.array([[1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],]),
     jnp.array(0)),
    ("case_start_edge", jnp.array([0, 1, 1]),
     jnp.array([[0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1, ],
                [0, 1, 1, 1,]]),
     jnp.array(0)),
    ("case_end_edge", jnp.array([0, 1, 1]),
     jnp.array([[1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                ]),
     jnp.array(3)),
    ("case_ff", jnp.array([0, 1, 1]),
     jnp.array([[1, 1, 1, 0],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                ]),
     jnp.array(4)),
    )
    def test_ff_ksp_nsfnet(self, request_array, link_slot_array, expected):
        self.key, self.env, self.obs, self.state, self.params = rsa_nsfnet_4_test_setup(guardband=0)
        self.state = self.state.replace(request_array=request_array, link_slot_array=link_slot_array)
        self.state = self.env.action_mask(self.state, self.params)
        action = self.variant(ff_ksp, static_argnums=(1,))(self.state, self.params)
        chex.assert_trees_all_close(action, expected)


class KspBfTest(parameterized.TestCase):

    def setUp(self):
        super().setUp()
        self.key, self.env, self.obs, self.state, self.params = rwa_4node_test_setup()

    @chex.all_variants()
    @parameterized.named_parameters(
        ("case_empty", jnp.array([0, 1, 1]),
         jnp.array([[0., 0., 0., 0.],
                    [0., 0., 0., 0.],
                    [0., 0., 0., 0.],
                    [0., 0., 0., 0.], ]),
         jnp.array(0)),
        ("case_full", jnp.array([0, 1, 1]),
         jnp.array([[-1., -1., -1., -1.],
                    [-1., -1., -1., -1.],
                    [-1., -1., -1., -1.],
                    [-1., -1., -1., -1.], ]),
         jnp.array(0)),
        ("case_start_edge", jnp.array([0, 1, 1]),
         jnp.array([[0., -1., -1., -1.],
                    [0., -1., -1., -1.],
                    [0., -1., -1., -1.],
                    [0., -1., -1., -1.], ]),
         jnp.array(0)),
        ("case_end_edge", jnp.array([0, 1, 1]),
         jnp.array([[-1., -1., -1., 0.],
                    [-1., -1., -1., 0.],
                    [-1., -1., -1., 0.],
                    [-1., -1., -1., 0.], ]),
         jnp.array(3)),
        ("case_bf", jnp.array([0, 1, 1]),
         jnp.array([[-1., -1., -1., 0.],
                    [0., 0., 0., -1.],
                    [0., 0., 0., -1.],
                    [0., 0., 0., -1.], ]),
         jnp.array(3)),
    )
    def test_ksp_bf(self, request_array, link_slot_array, expected):
        self.state = self.state.replace(request_array=request_array, link_slot_array=link_slot_array)
        self.state = self.env.action_mask(self.state, self.params)
        action = self.variant(ksp_bf, static_argnums=(1,))(self.state, self.params)
        chex.assert_trees_all_close(action, expected)

    @chex.all_variants()
    @parameterized.named_parameters(
        ("case_empty", jnp.array([0, 1, 1]),
         jnp.array([[0., 0., 1., 0., 1.],
                    [0., 0., 1., 0., 1.],
                    [0., 0., 1., 0., 1.],
                    [0., 0., 1., 0., 1.], ]),
         jnp.array(3)),
    )
    def test_ksp_bf_5_links(self, request_array, link_slot_array, expected):
        self.key, self.env, self.obs, self.state, self.params = rsa_4node_3_slot_request_test_setup()
        self.state = self.state.replace(request_array=request_array, link_slot_array=link_slot_array)
        self.state = self.env.action_mask(self.state, self.params)
        action = self.variant(ksp_bf, static_argnums=(1,))(self.state, self.params)
        chex.assert_trees_all_close(action, expected)

    @chex.all_variants()
    @parameterized.named_parameters(
    ("case_start_edge", jnp.array([0, 1, 1]),
     jnp.array([[0., 0., 0., -1., -1., -1., -1., 0., 0., 0., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.], ]),
     jnp.array(1)),
    ("case_end_edge", jnp.array([0, 1, 1]),
     jnp.array([[-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., 0., 0.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., 0., 0.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., 0., 0.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., 0., 0.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., 0., 0.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., 0., 0.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., 0., 0.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., 0., 0.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., 0., 0.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., 0., 0.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., 0., 0.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., 0., 0.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., 0., 0.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., 0., 0.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., 0., 0.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., 0., 0.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., 0., 0.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., 0., 0.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., 0., 0.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., 0., 0.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., 0., 0.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., 0., 0.],
                ]),
     jnp.array(14)),
    ("case_bf", jnp.array([0, 50, 1]),
     jnp.array([[-1., -1., -1., -1., -1., -1., -1., -1., 0., 0., -1., -1., -1., -1., -1., -1.],  # k=0.
                [-1., 0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],  # k=1.,3
                [-1., 0., 0., 0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],  # k=2,4
                [0., 0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],  # k=1.,4
                [-1., 0., 0., 0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],  # k=2,3
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],  # k=3,4
                [-1., 0., 0., 0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],  # k=2,3
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],  # k=3
                [-1., 0., 0., 0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],  # k=2
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],  # k=4
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [-1., 0., 0., 0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],  # k=4
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],  # k=4
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                ]),
     jnp.array(49)),  # slot 1 in path k=2
    ("case_best_fit", jnp.array([0, 1, 1]),
     jnp.array([[0., 0., 0., -1., -1., -1., -1., 0., 0., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.], ]),
     jnp.array(7)),
    ("case_tricky", jnp.array([0, 1, 1]),
     jnp.array([[1., 0., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],  # k=0
                [1., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 1., 1.],  # k=1,3
                [1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.],  # k=2,4
                [1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 1.],  # k=1,4
                [1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.],  # k=2,3
                [1., 0., 0., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],  # k=3,4
                [1., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0.],  # k=2,3
                [1., 0., 0., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
                [1., 0., 0., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],  # k=3
                [1., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0.],  # k=2
                [1., 0., 0., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],  # k=4
                [1., 0., 0., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
                [1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0.],  # k=2
                [1., 0., 0., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
                [1., 0., 0., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],  # k=4
                [1., 0., 0., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],  # k=4
                [1., 0., 0., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
                [1., 0., 0., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
                [1., 0., 0., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
                [1., 0., 0., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
                [1., 0., 0., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
                [1., 0., 0., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],]),
     jnp.array(28)),
    )
    def test_ksp_bf_nsfnet(self, request_array, link_slot_array, expected):
        self.key, self.env, self.obs, self.state, self.params = rsa_nsfnet_16_mod_test_setup()
        self.state = self.state.replace(request_array=request_array, link_slot_array=link_slot_array)
        self.state = self.env.action_mask(self.state, self.params)
        action = self.variant(ksp_bf, static_argnums=(1,))(self.state, self.params)
        chex.assert_trees_all_close(action, expected)


class BfKspTest(parameterized.TestCase):

    def setUp(self):
        super().setUp()
        self.key, self.env, self.obs, self.state, self.params = rwa_4node_test_setup()

    @chex.all_variants()
    @parameterized.named_parameters(
        ("case_empty", jnp.array([0, 1, 1]),
         jnp.array([[0., 0., 0., 0.],
                    [0., 0., 0., 0.],
                    [0., 0., 0., 0.],
                    [0., 0., 0., 0.], ]),
         jnp.array(0)),
        ("case_full", jnp.array([0, 1, 1]),
         jnp.array([[-1., -1., -1., -1.],
                    [-1., -1., -1., -1.],
                    [-1., -1., -1., -1.],
                    [-1., -1., -1., -1.], ]),
         jnp.array(0)),
        ("case_start_edge", jnp.array([0, 1, 1]),
         jnp.array([[0., -1., -1., -1.],
                    [0., -1., -1., -1.],
                    [0., -1., -1., -1.],
                    [0., -1., -1., -1.], ]),
         jnp.array(0)),
        ("case_end_edge", jnp.array([0, 1, 1]),
         jnp.array([[-1., -1., -1., 0.],
                    [-1., -1., -1., 0.],
                    [-1., -1., -1., 0.],
                    [-1., -1., -1., 0.], ]),
         jnp.array(3)),
        ("case_bf", jnp.array([0, 1, 1]),
         jnp.array([[-1., -1., -1., 0.],
                    [0., 0., 0., -1.],
                    [0., 0., 0., -1.],
                    [0., 0., 0., -1.], ]),
         jnp.array(3)),
    )
    def test_bf_ksp(self, request_array, link_slot_array, expected):
        self.state = self.state.replace(request_array=request_array, link_slot_array=link_slot_array)
        self.state = self.env.action_mask(self.state, self.params)
        action = self.variant(bf_ksp, static_argnums=(1,))(self.state, self.params)
        chex.assert_trees_all_close(action, expected)

    @chex.all_variants()
    @parameterized.named_parameters(
    ("case_start_edge", jnp.array([0, 1, 1]),
     jnp.array([[0., 0., 0., -1., -1., -1., -1., 0., 0., 0., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.], ]),
     jnp.array(1)),
    ("case_end_edge", jnp.array([0, 1, 1]),
     jnp.array([[-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., 0., 0.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., 0., 0.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., 0., 0.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., 0., 0.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., 0., 0.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., 0., 0.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., 0., 0.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., 0., 0.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., 0., 0.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., 0., 0.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., 0., 0.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., 0., 0.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., 0., 0.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., 0., 0.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., 0., 0.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., 0., 0.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., 0., 0.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., 0., 0.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., 0., 0.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., 0., 0.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., 0., 0.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., 0., 0.],
                ]),
     jnp.array(14)),
    ("case_bf", jnp.array([0, 50, 1]),
     jnp.array([[-1., -1., -1., -1., -1., -1., -1., -1., 0., 0., -1., -1., -1., -1., -1., -1.],  # k=0.
                [-1., 0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],  # k=1.,3
                [-1., 0., 0., 0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],  # k=2,4
                [0., 0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],  # k=1.,4
                [-1., 0., 0., 0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],  # k=2,3
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],  # k=3,4
                [-1., 0., 0., 0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],  # k=2,3
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],  # k=3
                [-1., 0., 0., 0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],  # k=2
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],  # k=4
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [-1., 0., 0., 0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],  # k=4
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],  # k=4
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                ]),
     jnp.array(49)),  # slot 1 in path k=2
    ("case_best_fit", jnp.array([0, 1, 1]),
     jnp.array([[0., 0., 0., -1., -1., -1., -1., 0., 0., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.], ]),
     jnp.array(7)),
    ("case_tricky", jnp.array([0, 50, 1]),
     jnp.array([[1., 0., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],  # k=0
                [1., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 1., 1.],  # k=1,3
                [1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.],  # k=2,4
                [1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 1.],  # k=1,4
                [1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.],  # k=2,3
                [1., 0., 0., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],  # k=3,4
                [1., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0.],  # k=2,3
                [1., 0., 0., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
                [1., 0., 0., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],  # k=3
                [1., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0.],  # k=2
                [1., 0., 0., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],  # k=4
                [1., 0., 0., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
                [1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0.],  # k=2
                [1., 0., 0., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
                [1., 0., 0., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],  # k=4
                [1., 0., 0., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],  # k=4
                [1., 0., 0., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
                [1., 0., 0., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
                [1., 0., 0., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
                [1., 0., 0., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
                [1., 0., 0., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
                [1., 0., 0., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],]),
     jnp.array(59)),
    )
    def test_bf_ksp_nsfnet(self, request_array, link_slot_array, expected):
        self.key, self.env, self.obs, self.state, self.params = rsa_nsfnet_16_mod_test_setup()
        self.state = self.state.replace(request_array=request_array, link_slot_array=link_slot_array)
        self.state = self.env.action_mask(self.state, self.params)
        action = self.variant(bf_ksp, static_argnums=(1,))(self.state, self.params)
        chex.assert_trees_all_close(action, expected)


class KmcffTest(parameterized.TestCase):

    def setUp(self):
        super().setUp()
        self.key, self.env, self.obs, self.state, self.params = rwa_4node_test_setup()

    @chex.all_variants()
    @parameterized.named_parameters(
        ("case_empty", jnp.array([0, 1, 1]),
         jnp.array([[0., 0., 0., 0.],
                    [0., 0., 0., 0.],
                    [0., 0., 0., 0.],
                    [0., 0., 0., 0.], ]),
         jnp.array(0)),
        ("case_full", jnp.array([0, 1, 1]),
         jnp.array([[-1., -1., -1., -1.],
                    [-1., -1., -1., -1.],
                    [-1., -1., -1., -1.],
                    [-1., -1., -1., -1.], ]),
         jnp.array(0)),
        ("case_start_edge", jnp.array([0, 1, 1]),
         jnp.array([[0., -1., -1., -1.],
                    [0., -1., -1., -1.],
                    [0., -1., -1., -1.],
                    [0., -1., -1., -1.], ]),
         jnp.array(0)),
        ("case_end_edge", jnp.array([0, 1, 1]),
         jnp.array([[-1., -1., -1., 0.],
                    [-1., -1., -1., 0.],
                    [-1., -1., -1., 0.],
                    [-1., -1., -1., 0.], ]),
         jnp.array(3)),
        ("case_min_cut", jnp.array([0, 1, 1]),
         jnp.array([[-1., -1., -1., 0.],
                    [0., 0., 0., -1.],
                    [0., 0., 0., -1.],
                    [0., 0., 0., -1.], ]),
         jnp.array(3)),
    )
    def test_kmc_ff(self, request_array, link_slot_array, expected):
        self.state = self.state.replace(request_array=request_array, link_slot_array=link_slot_array)
        self.state = self.env.action_mask(self.state, self.params)
        action = self.variant(kmc_ff, static_argnums=(1,))(self.state, self.params)
        chex.assert_trees_all_close(action, expected)

    @chex.all_variants()
    @parameterized.named_parameters(
    ("case_empty", jnp.array([0, 1, 1]),
     jnp.array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], ]),
     jnp.array(0)),
    ("case_full", jnp.array([0, 1, 1]),
     jnp.array([[-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.], ]),
     jnp.array(0)),
    ("case_start_edge", jnp.array([0, 1, 1]),
     jnp.array([[0., 0., 0., -1., -1., -1., -1., 0., 0., 0., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.], ]),
     jnp.array(0)),
    ("case_end_edge", jnp.array([0, 1, 1]),
     jnp.array([[-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., 0., 0.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., 0., 0.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., 0., 0.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., 0., 0.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., 0., 0.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., 0., 0.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., 0., 0.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., 0., 0.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., 0., 0.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., 0., 0.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., 0., 0.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., 0., 0.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., 0., 0.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., 0., 0.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., 0., 0.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., 0., 0.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., 0., 0.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., 0., 0.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., 0., 0.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., 0., 0.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., 0., 0.],
                [-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., 0., 0.],
                ]),
     jnp.array(14)),
    ("case_min_cut", jnp.array([0, 1, 1]),
     jnp.array([[-1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],  # k=0.
                [-1., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],  # k=1.,3
                [-1., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],  # k=2,4
                [0., 0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],  # k=1.,4
                [-1., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],  # k=2,3
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],  # k=3,4
                [-1., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],  # k=2,3
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],  # k=3
                [-1., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],  # k=2
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],  # k=4
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],  # k=4
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],  # k=4
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                ]),
     jnp.array(33)),  # slot 1 in path k=2
    ("case_best_fit", jnp.array([0, 1, 1]),
     jnp.array([[0., 0., 0., -1., -1., -1., -1., 0., 0., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.],
                [0., 0., 0., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1.], ]),
     jnp.array(0)),
    )
    def test_kmc_ff_nsfnet(self, request_array, link_slot_array, expected):
        self.key, self.env, self.obs, self.state, self.params = rsa_nsfnet_16_test_setup()
        self.state = self.state.replace(request_array=request_array, link_slot_array=link_slot_array)
        self.state = self.env.action_mask(self.state, self.params)
        action = self.variant(kmc_ff, static_argnums=(1,))(self.state, self.params)
        chex.assert_trees_all_close(action, expected)


class KmfffTest(parameterized.TestCase):

    def setUp(self):
        super().setUp()
        self.key, self.env, self.obs, self.state, self.params = rwa_4node_test_setup()

    @chex.all_variants()
    @parameterized.named_parameters(
        ("case_empty", jnp.array([0, 1, 1]),
         jnp.array([[0, 0, 0, 0],
                    [0, 0, 0, 0],
                    [0, 0, 0, 0],
                    [0, 0, 0, 0], ]),
         jnp.array(0)),
        ("case_full", jnp.array([0, 1, 1]),
         jnp.array([[-1, -1, -1, -1],
                    [-1, -1, -1, -1],
                    [-1, -1, -1, -1],
                    [-1, -1, -1, -1], ]),
         jnp.array(0)),
        ("case_start_edge", jnp.array([0, 1, 1]),
         jnp.array([[0, -1, -1, -1],
                    [0, -1, -1, -1],
                    [0, -1, -1, -1],
                    [0, -1, -1, -1], ]),
         jnp.array(0)),
        ("case_end_edge", jnp.array([0, 1, 1]),
         jnp.array([[-1, -1, -1, 0],
                    [-1, -1, -1, 0],
                    [-1, -1, -1, 0],
                    [-1, -1, -1, 0], ]),
         jnp.array(3)),
        ("case_min_frag", jnp.array([0, 1, 1]),
         jnp.array([[-1, -1, -1, 0],
                    [0, 0, 0, -1],
                    [0, 0, 0, -1],
                    [0, 0, 0, -1], ]),
         jnp.array(3)),
    )
    def test_kmf_ff(self, request_array, link_slot_array, expected):
        self.state = self.state.replace(request_array=request_array, link_slot_array=link_slot_array)
        self.state = self.env.action_mask(self.state, self.params)
        action = self.variant(kmf_ff, static_argnums=(1,))(self.state, self.params)
        chex.assert_trees_all_close(action, expected)

    @chex.all_variants()
    @parameterized.named_parameters(
    ("case_empty", jnp.array([0, 1, 1]),
     jnp.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ]),
     jnp.array(0)),
    ("case_full", jnp.array([0, 1, 1]),
     jnp.array([[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ]),
     jnp.array(0)),
    ("case_start_edge", jnp.array([0, 1, 1]),
     jnp.array([[0, 0, 0, -1, -1, -1, -1, 0, 0, 0, -1, -1, -1, -1, -1, -1],
                [0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                [0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                [0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                [0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                [0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                [0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                [0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                [0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                [0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                [0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                [0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                [0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                [0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                [0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                [0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                [0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                [0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                [0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                [0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                [0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                [0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ]),
     jnp.array(0)),
    ("case_end_edge", jnp.array([0, 1, 1]),
     jnp.array([[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0],
                [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0],
                [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0],
                [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0],
                [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0],
                [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0],
                [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0],
                [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0],
                [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0],
                [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0],
                [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0],
                [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0],
                [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0],
                [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0],
                [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0],
                [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0],
                [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0],
                [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0],
                [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0],
                [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0],
                [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0],
                [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0],
                ]),
     jnp.array(14)),
    ("case_min_frag", jnp.array([0, 1, 1]),
     jnp.array([[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],  # k=0
                [-1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],  # k=1,3
                [-1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],  # k=2,4
                [0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],  # k=1,4
                [-1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],  # k=2,3
                [0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],  # k=3,4
                [-1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],  # k=2,3
                [0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                [0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],  # k=3
                [-1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],  # k=2
                [0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],  # k=4
                [0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                [0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                [0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                [0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],  # k=4
                [0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],  # k=4
                [0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                [0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                [0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                [0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                [0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                [0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                ]),
     jnp.array(17)),  # slot 1 in path k=1
    )
    def test_kmf_ff_nsfnet(self, request_array, link_slot_array, expected):
        self.key, self.env, self.obs, self.state, self.params = rsa_nsfnet_16_test_setup()
        self.state = self.state.replace(request_array=request_array, link_slot_array=link_slot_array)
        self.state = self.env.action_mask(self.state, self.params)
        action = self.variant(kmf_ff, static_argnums=(1,))(self.state, self.params)
        chex.assert_trees_all_close(action, expected)


class FfkspTestRWALightpathReuse(parameterized.TestCase):

    def setUp(self):
        super().setUp()
        self.key, self.env, self.obs, self.state, self.params = rwa_4node_test_setup()

    @chex.all_variants()
    @parameterized.named_parameters(
    ("case_empty", jnp.array([0, 1, 1]),
     jnp.array([[-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                ]),
     jnp.array([[1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.], ]),
     jnp.array(0)),
    ("case_full", jnp.array([0, 1, 1]),
     jnp.array([[99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                ]),
     jnp.array([[0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.], ]),
     jnp.array(0)),
    ("case_start_edge", jnp.array([0, 1, 1]),
     jnp.array([[-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                ]),
     jnp.array([[1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.], ]),
     jnp.array(0)),
    ("case_end_edge", jnp.array([0, 1, 1]),
     jnp.array([[99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                ]),
     jnp.array([[0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.], ]),
     jnp.array(3)),
    ("case_reuse_lightpath", jnp.array([0, 1, 1]),
     jnp.array([[0, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                ]),
     jnp.array([[1000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.], ]),
     jnp.array(0)),
    ("case_dont_reuse_lightpath", jnp.array([0, 1, 1]),
     jnp.array([[1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                ]),
     jnp.array([[1000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.], ]),
     jnp.array(4)),
    )
    def test_ff_ksp_rwa_lightpath_reuse(self, request_array, path_index_array, link_capacity_array, expected):
        self.key, self.env, self.obs, self.state, self.params = rwa_lightpath_reuse_4_nsfnet_test_setup()
        self.state = self.state.replace(request_array=request_array,
                                        path_index_array=path_index_array,
                                        link_capacity_array=link_capacity_array)
        jax.debug.print("path_index_array initial {}", self.state.path_index_array, ordered=True)
        jax.debug.print("link_capacity_array initial {}", self.state.link_capacity_array, ordered=True)
        self.state = self.env.action_mask(self.state, self.params)
        action = self.variant(ff_ksp, static_argnums=(1,))(self.state, self.params)
        # step env
        obs, self.state, reward, done, info = self.variant(self.env.step, static_argnums=(3,))(
            self.key, self.state, action, self.params
        )
        jax.debug.print("path_index_array after {}", self.state.path_index_array, ordered=True)
        jax.debug.print("link_capacity_array after {}", self.state.link_capacity_array, ordered=True)
        chex.assert_trees_all_close(action, expected)


class KspFFTestRWALightpathReuse(parameterized.TestCase):

    def setUp(self):
        super().setUp()
        self.key, self.env, self.obs, self.state, self.params = rwa_4node_test_setup()

    @chex.all_variants()
    @parameterized.named_parameters(
    ("case_empty", jnp.array([0, 1, 1]),
     jnp.array([[-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                ]),
     jnp.array([[1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.], ]),
     jnp.array(0)),
    ("case_full", jnp.array([0, 1, 1]),
     jnp.array([[99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                ]),
     jnp.array([[0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.], ]),
     jnp.array(0)),
    ("case_start_edge", jnp.array([0, 1, 1]),
     jnp.array([[-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                ]),
     jnp.array([[1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.], ]),
     jnp.array(0)),
    ("case_end_edge", jnp.array([0, 1, 1]),
     jnp.array([[99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                ]),
     jnp.array([[0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.], ]),
     jnp.array(3)),
    ("case_reuse_lightpath", jnp.array([0, 1, 1]),
     jnp.array([[99, 99, 0, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                ]),
     jnp.array([[1000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.], ]),
     jnp.array(2)),
    ("case_dont_reuse_lightpath", jnp.array([0, 1, 1]),
     jnp.array([[1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                ]),
     jnp.array([[1000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.], ]),
     jnp.array(1)),
    )
    def test_ksp_ff_rwa_lightpath_reuse(self, request_array, path_index_array, link_capacity_array, expected):
        self.key, self.env, self.obs, self.state, self.params = rwa_lightpath_reuse_4_nsfnet_test_setup()
        self.state = self.state.replace(request_array=request_array,
                                        path_index_array=path_index_array,
                                        link_capacity_array=link_capacity_array)
        jax.debug.print("path_index_array initial {}", self.state.path_index_array, ordered=True)
        jax.debug.print("link_capacity_array initial {}", self.state.link_capacity_array, ordered=True)
        self.state = self.env.action_mask(self.state, self.params)
        action = self.variant(ksp_ff, static_argnums=(1,))(self.state, self.params)
        # step env
        obs, self.state, reward, done, info = self.variant(self.env.step, static_argnums=(3,))(
            self.key, self.state, action, self.params
        )
        jax.debug.print("path_index_array after {}", self.state.path_index_array, ordered=True)
        jax.debug.print("link_capacity_array after {}", self.state.link_capacity_array, ordered=True)
        chex.assert_trees_all_close(action, expected)


class KspMUTest(parameterized.TestCase):

    def setUp(self):
        super().setUp()
        self.key, self.env, self.obs, self.state, self.params = rwa_4node_test_setup()

    @chex.all_variants()
    @parameterized.named_parameters(
    ("case_empty", jnp.array([0, 1, 1]),
     jnp.array([[-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                ]),
     jnp.array([[1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.], ]),
     jnp.array(0), True, False),
    ("case_full", jnp.array([0, 1, 1]),
     jnp.array([[99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                [99, 99, 99, 99, ],
                ]),
     jnp.array([[0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.],
                [0., 0., 0., 0.], ]),
     jnp.array(0), True, False),
    ("case_start_edge", jnp.array([0, 1, 1]),
     jnp.array([[-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                [-1, -1, -1, -1,],
                ]),
     jnp.array([[1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.], ]),
     jnp.array(0), True, False),
    ("case_end_edge", jnp.array([0, 1, 1]),
     jnp.array([[99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                [99, 99, 99, -1,],
                ]),
     jnp.array([[0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.],
                [0., 0., 0., 1000000.], ]),
     jnp.array(3), True, False),
    ("case_reuse_lightpath", jnp.array([0, 1, 1]),
     jnp.array([[99, 99, 0, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                ]),
     jnp.array([[1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.], ]),
     jnp.array(2), True, False),
    ("case_dont_reuse_lightpath", jnp.array([0, 1, 1]),
     jnp.array([[1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                ]),
     jnp.array([[400., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.], ]),
     jnp.array(1), True, False),
        ("case_mostused_lightpath", jnp.array([0, 1, 1]),
         jnp.array([[1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, 99, -1, ],
                    [-1, -1, 99, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    ]),
         jnp.array([[400., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 400., 1000000.],
                    [1000000., 1000000., 400., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.], ]),
         jnp.array(2), True, False),
        ("case_mostused_lightpath_nonunique", jnp.array([0, 1, 1]),
         jnp.array([[1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, 99, 99, -1, ],
                    [-1, 99, 99, -1, ],
                    [-1, -1, 99, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    ]),
         jnp.array([[400., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 100., 400., 1000000.],
                    [1000000., 100., 400., 1000000.],
                    [1000000., 1000000., 400., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.], ]),
         jnp.array(1), False, False),
        ("case_mostused_lightpath_nonunique_rel", jnp.array([0, 1, 1]),
         jnp.array([[1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, 99, 99, -1, ],
                    [-1, 99, 99, -1, ],
                    [-1, -1, 99, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    ]),
         jnp.array([[400., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 100., 400., 1000000.],
                    [1000000., 100., 400., 1000000.],
                    [1000000., 1000000., 400., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.], ]),
         jnp.array(1), False, True),
    )
    def test_ksp_mu_rwa_lightpath_reuse(
            self, request_array, path_index_array, link_capacity_array, expected, unique_lightpaths, relative
    ):
        self.key, self.env, self.obs, self.state, self.params = rwa_lightpath_reuse_4_nsfnet_test_setup()
        self.state = self.state.replace(request_array=request_array,
                                        path_index_array=path_index_array,
                                        link_capacity_array=link_capacity_array)
        jax.debug.print("path_index_array initial {}", self.state.path_index_array, ordered=True)
        jax.debug.print("link_capacity_array initial {}", self.state.link_capacity_array, ordered=True)
        self.state = self.env.action_mask(self.state, self.params)
        action = self.variant(ksp_mu, static_argnums=(1, 2, 3))(self.state, self.params, unique_lightpaths, relative)
        # step env
        obs, self.state, reward, done, info = self.variant(self.env.step, static_argnums=(3,))(
            self.key, self.state, action, self.params
        )
        jax.debug.print("path_index_array after {}", self.state.path_index_array, ordered=True)
        jax.debug.print("link_capacity_array after {}", self.state.link_capacity_array, ordered=True)
        chex.assert_trees_all_close(action, expected)

    @chex.all_variants()
    @parameterized.named_parameters(
        ("case_mu", jnp.array([0, 1, 1]),
         jnp.array([[1, 1, 1, 1],
                    [0, 0, 0, 1],
                    [0, 0, 0, 1],
                    [0, 0, 0, 1],
                    [0, 0, 0, 1],
                    [0, 0, 0, 1],
                    [0, 0, 0, 1],
                    [0, 0, 0, 1],
                    [0, 0, 0, 1],
                    [0, 0, 0, 1],
                    [0, 0, 0, 1],
                    [0, 0, 0, 1],
                    [0, 0, 0, 1],
                    [0, 0, 0, 1],
                    [0, 0, 0, 1],
                    [0, 0, 0, 1],
                    [0, 0, 0, 1],
                    [0, 0, 0, 1],
                    [0, 0, 0, 1],
                    [0, 1, 0, 1],
                    [0, 1, 0, 1],
                    [0, 1, 0, 1],
                    ]),
         jnp.array(5), True, True),
    )
    def test_ksp_mu_nsfnet_rsa(self, request_array, link_slot_array, expected, unique_lightpaths, relative):
        self.key, self.env, self.obs, self.state, self.params = rsa_nsfnet_4_test_setup()
        self.state = self.state.replace(request_array=request_array, link_slot_array=link_slot_array)
        self.state = self.env.action_mask(self.state, self.params)
        action = self.variant(ksp_mu, static_argnums=(1, 2, 3))(self.state, self.params, unique_lightpaths, relative)
        chex.assert_trees_all_close(action, expected)


class MUKspTest(parameterized.TestCase):

    def setUp(self):
        super().setUp()
        self.key, self.env, self.obs, self.state, self.params = rwa_4node_test_setup()

    @chex.all_variants()
    @parameterized.named_parameters(
        ("case_empty", jnp.array([0, 1, 1]),
         jnp.array([[-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    ]),
         jnp.array([[1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.], ]),
         jnp.array(0), True, False),
        ("case_full", jnp.array([0, 1, 1]),
         jnp.array([[99, 99, 99, 99, ],
                    [99, 99, 99, 99, ],
                    [99, 99, 99, 99, ],
                    [99, 99, 99, 99, ],
                    [99, 99, 99, 99, ],
                    [99, 99, 99, 99, ],
                    [99, 99, 99, 99, ],
                    [99, 99, 99, 99, ],
                    [99, 99, 99, 99, ],
                    [99, 99, 99, 99, ],
                    [99, 99, 99, 99, ],
                    [99, 99, 99, 99, ],
                    [99, 99, 99, 99, ],
                    [99, 99, 99, 99, ],
                    [99, 99, 99, 99, ],
                    [99, 99, 99, 99, ],
                    [99, 99, 99, 99, ],
                    [99, 99, 99, 99, ],
                    [99, 99, 99, 99, ],
                    [99, 99, 99, 99, ],
                    [99, 99, 99, 99, ],
                    [99, 99, 99, 99, ],
                    ]),
         jnp.array([[0., 0., 0., 0.],
                    [0., 0., 0., 0.],
                    [0., 0., 0., 0.],
                    [0., 0., 0., 0.],
                    [0., 0., 0., 0.],
                    [0., 0., 0., 0.],
                    [0., 0., 0., 0.],
                    [0., 0., 0., 0.],
                    [0., 0., 0., 0.],
                    [0., 0., 0., 0.],
                    [0., 0., 0., 0.],
                    [0., 0., 0., 0.],
                    [0., 0., 0., 0.],
                    [0., 0., 0., 0.],
                    [0., 0., 0., 0.],
                    [0., 0., 0., 0.],
                    [0., 0., 0., 0.],
                    [0., 0., 0., 0.],
                    [0., 0., 0., 0.],
                    [0., 0., 0., 0.],
                    [0., 0., 0., 0.],
                    [0., 0., 0., 0.], ]),
         jnp.array(0), True, False),
        ("case_start_edge", jnp.array([0, 1, 1]),
         jnp.array([[-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    ]),
         jnp.array([[1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.], ]),
         jnp.array(0), True, False),
        ("case_end_edge", jnp.array([0, 1, 1]),
         jnp.array([[99, 99, 99, -1, ],
                    [99, 99, 99, -1, ],
                    [99, 99, 99, -1, ],
                    [99, 99, 99, -1, ],
                    [99, 99, 99, -1, ],
                    [99, 99, 99, -1, ],
                    [99, 99, 99, -1, ],
                    [99, 99, 99, -1, ],
                    [99, 99, 99, -1, ],
                    [99, 99, 99, -1, ],
                    [99, 99, 99, -1, ],
                    [99, 99, 99, -1, ],
                    [99, 99, 99, -1, ],
                    [99, 99, 99, -1, ],
                    [99, 99, 99, -1, ],
                    [99, 99, 99, -1, ],
                    [99, 99, 99, -1, ],
                    [99, 99, 99, -1, ],
                    [99, 99, 99, -1, ],
                    [99, 99, 99, -1, ],
                    [99, 99, 99, -1, ],
                    [99, 99, 99, -1, ],
                    ]),
         jnp.array([[0., 0., 0., 1000000.],
                    [0., 0., 0., 1000000.],
                    [0., 0., 0., 1000000.],
                    [0., 0., 0., 1000000.],
                    [0., 0., 0., 1000000.],
                    [0., 0., 0., 1000000.],
                    [0., 0., 0., 1000000.],
                    [0., 0., 0., 1000000.],
                    [0., 0., 0., 1000000.],
                    [0., 0., 0., 1000000.],
                    [0., 0., 0., 1000000.],
                    [0., 0., 0., 1000000.],
                    [0., 0., 0., 1000000.],
                    [0., 0., 0., 1000000.],
                    [0., 0., 0., 1000000.],
                    [0., 0., 0., 1000000.],
                    [0., 0., 0., 1000000.],
                    [0., 0., 0., 1000000.],
                    [0., 0., 0., 1000000.],
                    [0., 0., 0., 1000000.],
                    [0., 0., 0., 1000000.],
                    [0., 0., 0., 1000000.], ]),
         jnp.array(3), True, False),
        ("case_reuse_lightpath", jnp.array([0, 1, 1]),
         jnp.array([[99, 99, 0, -1, ],
                    [99, 99, 99, -1, ],
                    [99, 99, 99, -1, ],
                    [99, 99, 99, -1, ],
                    [99, 99, 99, -1, ],
                    [99, 99, 99, -1, ],
                    [99, 99, 99, -1, ],
                    [99, 99, 99, -1, ],
                    [99, 99, 99, -1, ],
                    [99, 99, 99, -1, ],
                    [99, 99, 99, -1, ],
                    [99, 99, 99, -1, ],
                    [99, 99, 99, -1, ],
                    [99, 99, 99, -1, ],
                    [99, 99, 99, -1, ],
                    [99, 99, 99, -1, ],
                    [99, 99, 99, -1, ],
                    [99, 99, 99, -1, ],
                    [99, 99, 99, -1, ],
                    [99, 99, 99, -1, ],
                    [99, 99, 99, -1, ],
                    [99, 99, 99, -1, ],
                    ]),
         jnp.array([[1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.], ]),
         jnp.array(2), True, False),
        ("case_dont_reuse_lightpath", jnp.array([0, 1, 1]),
         jnp.array([[1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    ]),
         jnp.array([[400., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.], ]),
         jnp.array(4), True, False),
        ("case_mostused_lightpath", jnp.array([0, 1, 1]),
         jnp.array([[1, -1, 99, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, 99, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, 99, -1, ],
                    ]),
         jnp.array([[400., 1000000., 400., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 400., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 400., 1000000.], ]),
         jnp.array(10), True, False),
        ("case_mostused_lightpath_nonunique", jnp.array([0, 1, 1]),
         jnp.array([[1, 99, 99, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, 99, 99, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, 99, -1, ],
                    [-1, 99, 99, -1, ],
                    ]),
         jnp.array([[400., 100., 400., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 100., 400., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 400., 1000000.],
                    [1000000., 100., 400., 1000000.], ]),
         jnp.array(9), False, False),
        ("case_mostused_lightpath_nonunique_rel", jnp.array([0, 1, 1]),
         jnp.array([[1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, 99, 99, -1, ],
                    [-1, 99, 99, -1, ],
                    [-1, -1, 99, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    ]),
         jnp.array([[400., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 100., 400., 1000000.],
                    [1000000., 100., 400., 1000000.],
                    [1000000., 1000000., 400., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.], ]),
         jnp.array(1), False, True),
    )
    def test_mu_ksp_rwa_lightpath_reuse(
            self, request_array, path_index_array, link_capacity_array, expected, unique_lightpaths, relative
    ):
        self.key, self.env, self.obs, self.state, self.params = rwa_lightpath_reuse_4_nsfnet_test_setup()
        self.state = self.state.replace(request_array=request_array,
                                        path_index_array=path_index_array,
                                        link_capacity_array=link_capacity_array)
        jax.debug.print("path_index_array initial {}", self.state.path_index_array, ordered=True)
        jax.debug.print("link_capacity_array initial {}", self.state.link_capacity_array, ordered=True)
        self.state = self.env.action_mask(self.state, self.params)
        action = self.variant(mu_ksp, static_argnums=(1, 2, 3))(self.state, self.params, unique_lightpaths,
                                                                relative)
        # step env
        obs, self.state, reward, done, info = self.variant(self.env.step, static_argnums=(3,))(
            self.key, self.state, action, self.params
        )
        jax.debug.print("path_index_array after {}", self.state.path_index_array, ordered=True)
        jax.debug.print("link_capacity_array after {}", self.state.link_capacity_array, ordered=True)
        chex.assert_trees_all_close(action, expected)

    @chex.all_variants()
    @parameterized.named_parameters(
        ("case_mu", jnp.array([0, 1, 1]),
         jnp.array([[1, 1, 1, 1],
                    [0, 1, 0, 1],
                    [0, 0, 0, 1],
                    [0, 0, 0, 1],
                    [0, 0, 0, 1],
                    [0, 0, 0, 1],
                    [0, 0, 0, 1],
                    [0, 0, 0, 1],
                    [0, 0, 0, 1],
                    [0, 0, 0, 1],
                    [0, 0, 0, 1],
                    [0, 0, 0, 1],
                    [0, 0, 0, 1],
                    [0, 0, 0, 1],
                    [0, 0, 0, 1],
                    [0, 0, 0, 1],
                    [0, 0, 0, 1],
                    [0, 0, 0, 1],
                    [0, 0, 0, 1],
                    [0, 0, 0, 1],
                    [0, 0, 0, 1],
                    [0, 0, 0, 1],
                    ]),
         jnp.array(13), True, True),
    )
    def test_mu_ksp_nsfnet_rsa(self, request_array, link_slot_array, expected, unique_lightpaths, relative):
        self.key, self.env, self.obs, self.state, self.params = rsa_nsfnet_4_test_setup()
        self.state = self.state.replace(request_array=request_array, link_slot_array=link_slot_array)
        self.state = self.env.action_mask(self.state, self.params)
        action = self.variant(mu_ksp, static_argnums=(1, 2, 3))(self.state, self.params, unique_lightpaths,
                                                                relative)
        chex.assert_trees_all_close(action, expected)


class KcaFfTest(parameterized.TestCase):

    def setUp(self):
        super().setUp()
        self.key, self.env, self.obs, self.state, self.params = rwa_4node_test_setup()

    @chex.all_variants()
    @parameterized.named_parameters(
        ("case_empty", jnp.array([0, 1, 1]),
         jnp.array([[0, 0, 0, 0],
                    [0, 0, 0, 0],
                    [0, 0, 0, 0],
                    [0, 0, 0, 0], ]),
         jnp.array(0)),
        ("case_full", jnp.array([0, 1, 1]),
         jnp.array([[-1, -1, -1, -1],
                    [-1, -1, -1, -1],
                    [-1, -1, -1, -1],
                    [-1, -1, -1, -1], ]),
         jnp.array(0)),
        ("case_start_edge", jnp.array([0, 1, 1]),
         jnp.array([[0, -1, -1, -1],
                    [0, -1, -1, -1],
                    [0, -1, -1, -1],
                    [0, -1, -1, -1], ]),
         jnp.array(0)),
        ("case_end_edge", jnp.array([0, 1, 1]),
         jnp.array([[-1, -1, -1, 0],
                    [-1, -1, -1, 0],
                    [-1, -1, -1, 0],
                    [-1, -1, -1, 0], ]),
         jnp.array(3)),
        ("case_min_congestion", jnp.array([0, 1, 1]),
         jnp.array([[-1, -1, -1, -1],
                    [0, 0, -1, -1],
                    [0, 0, -1, -1],
                    [0, 0, 0, -1], ]),
         jnp.array(4)),
    )
    def test_kca_ff(self, request_array, link_slot_array, expected):
        self.state = self.state.replace(request_array=request_array, link_slot_array=link_slot_array)
        self.state = self.env.action_mask(self.state, self.params)
        action = self.variant(kca_ff, static_argnums=(1,))(self.state, self.params)
        chex.assert_trees_all_close(action, expected)

    @chex.all_variants()
    @parameterized.named_parameters(
    ("case_min_congestion", jnp.array([0, 1, 1]),
     jnp.array([[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],  # k=0
                [-1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],  # k=1,3
                [-1, 0, 0, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # k=2,4
                [-1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],  # k=1,4
                [-1, 0, 0, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # k=2,3
                [0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],  # k=3,4
                [-1, 0, 0, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # k=2,3
                [0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                [0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],  # k=3
                [-1, 0, 0, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # k=2
                [0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],  # k=4
                [0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                [0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                [0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                [0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],  # k=4
                [0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],  # k=4
                [0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                [0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                [0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                [0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                [0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                [0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                ]),
     jnp.array(49)),  # slot 1 in path k=1
    )
    def test_kca_ff_nsfnet(self, request_array, link_slot_array, expected):
        self.key, self.env, self.obs, self.state, self.params = rsa_nsfnet_16_test_setup()
        self.state = self.state.replace(request_array=request_array, link_slot_array=link_slot_array)
        self.state = self.env.action_mask(self.state, self.params)
        action = self.variant(kca_ff, static_argnums=(1,))(self.state, self.params)
        chex.assert_trees_all_close(action, expected)

    @chex.all_variants()
    @parameterized.named_parameters(
    ("case_reuse_lightpath", jnp.array([0, 1, 1]),
     jnp.array([[99, 99, 0, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                [99, 99, 99, -1, ],
                ]),
     jnp.array([[400., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.], ]),
     jnp.array(2)),
    ("case_dont_reuse_lightpath", jnp.array([0, 1, 1]),
     jnp.array([[1, 1, 1, 1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [-1, -1, -1, -1, ],
                [1, -1, -1, -1, ],
                [1, -1, -1, -1, ],
                [1, -1, -1, -1, ],
                [1, -1, -1, -1, ],
                ]),
     jnp.array([[100., 100., 100., 100.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [1000000., 1000000., 1000000., 1000000.],
                [100., 1000000., 1000000., 1000000.],
                [100., 1000000., 1000000., 1000000.],
                [100., 1000000., 1000000., 1000000.],
                [100., 1000000., 1000000., 1000000.], ]),
     jnp.array(4)),
        ("case_congested_lightpath", jnp.array([0, 1, 1]),
         jnp.array([[1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, 99, -1, ],
                    [-1, -1, 99, -1, ],
                    [-1, -1, 99, -1, ],
                    [-1, -1, -1, 99, ],
                    [-1, -1, -1, 99, ],
                    [-1, -1, -1, 99, ],
                    [-1, -1, -1, 99, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    [-1, -1, -1, -1, ],
                    ]),
         jnp.array([[0., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 0., 1000000.],
                    [1000000., 1000000., 400., 1000000.],
                    [1000000., 1000000., 400., 1000000.],
                    [1000000., 1000000., 1000000., 400.],
                    [1000000., 1000000., 1000000., 400.],
                    [1000000., 1000000., 1000000., 400.],
                    [1000000., 1000000., 1000000., 400.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.],
                    [1000000., 1000000., 1000000., 1000000.], ]),
         jnp.array(1)),
    )
    def test_kca_ff_rwa_lightpath_reuse(self, request_array, path_index_array, link_capacity_array, expected):
        self.key, self.env, self.obs, self.state, self.params = rwa_lightpath_reuse_4_nsfnet_test_setup()
        self.state = self.state.replace(request_array=request_array,
                                        path_index_array=path_index_array,
                                        link_capacity_array=link_capacity_array)
        jax.debug.print("path_index_array initial {}", self.state.path_index_array, ordered=True)
        jax.debug.print("link_capacity_array initial {}", self.state.link_capacity_array, ordered=True)
        self.state = self.env.action_mask(self.state, self.params)
        action = self.variant(kca_ff, static_argnums=(1,))(self.state, self.params)
        # step env
        obs, self.state, reward, done, info = self.variant(self.env.step, static_argnums=(3,))(
            self.key, self.state, action, self.params
        )
        jax.debug.print("path_index_array after {}", self.state.path_index_array, ordered=True)
        jax.debug.print("link_capacity_array after {}", self.state.link_capacity_array, ordered=True)
        chex.assert_trees_all_close(action, expected)


class KsplfTest(parameterized.TestCase):

    def setUp(self):
        super().setUp()
        self.key, self.env, self.obs, self.state, self.params = rwa_4node_test_setup()

    @chex.all_variants()
    @parameterized.named_parameters(
        ("case_empty", jnp.array([0, 1, 1]),
         jnp.array([[0, 0, 0, 0],
                    [0, 0, 0, 0],
                    [0, 0, 0, 0],
                    [0, 0, 0, 0], ]),
         jnp.array(3)),
        ("case_full", jnp.array([0, 1, 1]),
         jnp.array([[1, 1, 1, 1],
                    [1, 1, 1, 1],
                    [1, 1, 1, 1],
                    [1, 1, 1, 1], ]),
         jnp.array(3)),
        ("case_start_edge", jnp.array([0, 1, 1]),
         jnp.array([[0, 1, 1, 1],
                    [0, 1, 1, 1],
                    [0, 1, 1, 1],
                    [0, 1, 1, 1], ]),
         jnp.array(0)),
        ("case_end_edge", jnp.array([0, 1, 1]),
         jnp.array([[1, 1, 1, 0],
                    [1, 1, 1, 0],
                    [1, 1, 1, 0],
                    [1, 1, 1, 0], ]),
         jnp.array(3)),
        ("case_ksp", jnp.array([0, 1, 1]),
         jnp.array([[1, 1, 1, 0],
                    [0, 0, 0, 1],
                    [0, 0, 0, 1],
                    [0, 0, 0, 1], ]),
         jnp.array(3)),
        ("case_lf", jnp.array([0, 1, 1]),
         jnp.array([[1, 0, 0, 1],
                    [0, 0, 0, 0],
                    [0, 0, 0, 0],
                    [0, 0, 0, 0], ]),
         jnp.array(2)),
    )
    def test_ksp_lf(self, request_array, link_slot_array, expected):
        self.state = self.state.replace(request_array=request_array, link_slot_array=link_slot_array)
        self.state = self.env.action_mask(self.state, self.params)
        action = self.variant(ksp_lf, static_argnums=(1,))(self.state, self.params)
        chex.assert_trees_all_close(action, expected)

    @chex.all_variants()
    @parameterized.named_parameters(
    ("case_empty", jnp.array([0, 1, 1]),
     jnp.array([[0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                ]),
     jnp.array(3)),
    ("case_full", jnp.array([0, 1, 1]),
     jnp.array([[1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 1, 1], ]),
     jnp.array(3)),
    ("case_start_edge", jnp.array([0, 1, 1]),
     jnp.array([[0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,],
                [0, 1, 1, 1,]]),
     jnp.array(0)),
    ("case_end_edge", jnp.array([0, 1, 1]),
     jnp.array([[1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                [1, 1, 1, 0],
                ]),
     jnp.array(3)),
    ("case_ff", jnp.array([0, 1, 1]),
     jnp.array([[1, 1, 1, 0],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                [0, 0, 0, 1],
                ]),
     jnp.array(3)),
    )
    def test_ksp_lf_nsfnet(self, request_array, link_slot_array, expected):
        self.key, self.env, self.obs, self.state, self.params = rsa_nsfnet_4_test_setup(guardband=0)
        self.state = self.state.replace(request_array=request_array, link_slot_array=link_slot_array)
        self.state = self.env.action_mask(self.state, self.params)
        action = self.variant(ksp_lf, static_argnums=(1,))(self.state, self.params)
        chex.assert_trees_all_close(action, expected)


if __name__ == '__main__':
    os.environ['XLA_FLAGS'] = "--xla_force_host_platform_device_count=4"
    jax.config.update('jax_numpy_rank_promotion', 'raise')
    absltest.main()
