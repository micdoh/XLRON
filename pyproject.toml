[tool.poetry]
name = "XLRON"
version = "0.1.0"
description = "Accelerated Learning and Resource Allocation for Optical Networks"
authors = ["Michael Doherty"]
readme = "README.md"

[tool.poetry.dependencies]
python = ">=3.10,<4.0"
numpy = "^1.23.4"
networkx = "^2.8.7"
Cython = "^0.29.32"
pymongo = "^4.3.2"
pillow = "^9.3.0"
tqdm = "^4.64.1"
scipy = "^1.9.3"
joblib = "^1.2.0"
pip = "^22.2"
progress = "^1.6"
cffi = "^1.15.1"
wandb = "^0.13.4"
scikit-learn = "^1.1.3"
black = "^22.12.0"
pytest = "^7.2.0"
pyyaml = "^6.0"
seaborn = "^0.12.2"
#jax = {extras = ["tpu"], version = "^0.4.11"}
#jax = {extras = ["cuda11_pip"], version = "^0.4.11"}
jax = { extras = ["cpu"], version = "^0.4.11" }
# Below jax version is built from source to support Apple Silicon GPU, but it's too buggy at present
#jax-metal = "0.1.0"
gymnax = "^0.0.6"
chex = "^0.1.82"
distrax = "^0.1.4"
mkdocs = "^1.5.2"
ruff = "^0.0.286"
mkdocs-material = "^9.2.6"
mkdocstrings = { version = ">=0.18", extras = ["python"] }
pytest-cov = "^4.1.0"
absl-py = "^1.4.0"
dm-haiku = "^0.0.10"
rlax = "^0.1.6"
jraph = "^0.0.6.dev0"
ml-dtypes = "^0.3.1"
orbax = "^0.1.9"
mkinit = "^1.1.0"
perfetto = "^0.7.0"
tensorflow = "^2.16.1"
tensorboard-plugin-profile = "^2.15.1"
ipykernel = "^6.29.4"
jupyter = "^1.0.0"
penzai = "^0.1.2"
jaxopt = "^0.8.3"
griffe = "^1.5.1"
mkdocstrings-python = "^1.12.2"
box = "^0.1.5"
python-box = "^7.3.2"

[tool.poetry.extras]
cuda = ["nvidia-cuda-runtime-cu11", "torch", "torchvision"]


[[tool.poetry.source]]
name = "nvidia"
url = "https://pypi.ngc.nvidia.com"
priority = 'supplemental'

[[tool.poetry.source]]
name = "pypi-public"
url = "https://pypi.org/simple/"
priority = 'default'

[tool.black]
line-length = 88
target-version = ['py37']
include = '\.pyi?$'
extend-exclude = '''
# A regex preceded with ^/ will apply only to files and directories
# in the root of the project.
^/foo.py  # exclude a file named foo.py in the root of the project (in addition to the defaults)
'''

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.8
target-version = "py38"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
